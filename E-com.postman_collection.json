{
	"info": {
		"_postman_id": "acfd6e65-5f5e-4c42-a468-b8033f077dad",
		"name": "E-com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23159132"
	},
	"item": [
		{
			"name": "Automation",
			"item": [
				{
					"name": "SIGN UP- https://staging-be-ecom.techserve4u.com/api/user/signup Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"name\": \"{{$randomFullName}}\",\n  \"password\": \"{{$randomPassword}}\"\n}"
						},
						"url": {
							"raw": "https://staging-be-ecom.techserve4u.com/api/user/signup",
							"protocol": "https",
							"host": [
								"staging-be-ecom",
								"techserve4u",
								"com"
							],
							"path": [
								"api",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "As a user I should be able to sign in with a registered email and correct password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get the token from the response body\r",
									"var JsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"capture_Token\",JsonData.token);\r",
									"\r",
									"\r",
									"pm.test(\"As a valid user, I should be able to log in successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User sign in should be less than 600 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"User sign in should be less than 100 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Verify the header information\r",
									"pm.test(\"Response header is present\", function () {\r",
									"    pm.response.to.have.header(\"Date\");\r",
									"    pm.response.to.have.header(\"Connection\");\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Token key is matching\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"\r",
									"//Schema_validation\r",
									"\r",
									"var schema_validation={\r",
									"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\r",
									"    \"$id\": \"http://example.com/example.json\",\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"title\": \"Root Schema\",\r",
									"    \"required\": [\r",
									"        \"token\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"token\": {\r",
									"            \"type\": \"string\",\r",
									"            \"default\": \"\",\r",
									"            \"title\": \"The token Schema\",\r",
									"            \"examples\": [\r",
									"                \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzA4ZjdmZDRhMTRjMGI3MDk1ODUyOTIiLCJyb2xlIjoidXNlciIsImVtYWlsIjoiYWJkdWxsYWhtZG11bm5hQGdtYWlsLmNvbSIsImlhdCI6MTY3MzI1ODQ5MywiZXhwIjoxNjczMzQ0ODkzfQ.YKENMk7GANnxMW6I5-y_k4XEHAdQHcP3rYBCkgQJLGY\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"examples\": [{\r",
									"        \"token\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MzA4ZjdmZDRhMTRjMGI3MDk1ODUyOTIiLCJyb2xlIjoidXNlciIsImVtYWlsIjoiYWJkdWxsYWhtZG11bm5hQGdtYWlsLmNvbSIsImlhdCI6MTY3MzI1ODQ5MywiZXhwIjoxNjczMzQ0ODkzfQ.YKENMk7GANnxMW6I5-y_k4XEHAdQHcP3rYBCkgQJLGY\"\r",
									"    }]\r",
									"};\r",
									"\r",
									"\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(JsonData, schema_validation)).to.be.true;\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"munna007.\",\n  \"email\": \"abdullahmdmunna@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{swagger}}/api/user/signin",
							"host": [
								"{{swagger}}"
							],
							"path": [
								"api",
								"user",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify a user valid token Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{capture_Token}}"
							}
						],
						"url": {
							"raw": "{{swagger}}/api/user/verify",
							"host": [
								"{{swagger}}"
							],
							"path": [
								"api",
								"user",
								"verify"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}